import{_ as p,c as o,b as l,a as s,d as a,e as t,r as i,o as r}from"./app-DXyB3U1V.js";const c={},u={href:"https://github.com/LasyIsLazy/gh-pages-Actions-demo",target:"_blank",rel:"noopener noreferrer"},d={href:"https://help.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/LasyIsLazy/gh-pages-action-demo/blob/master/.github/workflows/main.yml",target:"_blank",rel:"noopener noreferrer"},m={href:"https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://lasyislazy.github.io/gh-pages-action-demo/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/actions",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/sdras/awesome-actions",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.lasy.site/",target:"_blank",rel:"noopener noreferrer"},f={class:"custom-container tip"},x={href:"https://github.com/LasyIsLazy",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.lasy.site",target:"_blank",rel:"noopener noreferrer"},A={href:"https://help.github.com/en/github/working-with-github-pages/about-github-pages",target:"_blank",rel:"noopener noreferrer"},H={href:"https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},R={href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"};function P(S,n){const e=i("ExternalLinkIcon");return r(),o("div",null,[n[35]||(n[35]=l('<h1 id="使用-github-actions-自动部署博客" tabindex="-1"><a class="header-anchor" href="#使用-github-actions-自动部署博客"><span>使用 GitHub Actions 自动部署博客</span></a></h1><p>本篇以 Github Pages 为例，并且假设你已经掌握了 GitHub Pages 的使用。</p><p>假设你的文章和静态文件在同一个仓库，使用 <code>master</code> 分支管理文章和代码，使用 <code>gh-pages</code> 分支存放生成的静态文件</p><p>一般部署博客的流程是：</p><ol><li>写一篇文章</li><li>生成静态文件：<code>npm run build</code></li><li>切换 <code>gh-pages</code> 分支</li><li>复制静态文件到 <code>gh-pages</code> 分支</li><li>访问网址验证是否成功</li></ol><p>博客就是用来写文章的，每次写篇文章还要搞那么多操作。</p><p>当你使用了 GitHub Actions 之后，流程可以简化为：</p><ol><li>写一篇文章</li><li>提交到 GitHub</li></ol><p>结束了，是不是很方便？</p><p>从机械的流程中解脱，专注于写作。</p><p>那么开始打造我们的 GitHub Actions 吧。</p>',11)),s("p",null,[n[1]||(n[1]=a("我创建了一个")),s("a",u,[n[0]||(n[0]=a("示例项目")),t(e)]),n[2]||(n[2]=a("在我的 GitHub 仓库，用的是 VuePress（一个 Vue 官方的静态站点生成器）。"))]),n[36]||(n[36]=s("h2",{id:"设置-secrets",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#设置-secrets"},[s("span",null,"设置 Secrets")])],-1)),n[37]||(n[37]=s("p",null,"后面部署的 Action 需要有操作你的仓库的权限，因此提前设置好 GitHub personal access（个人访问令牌）。",-1)),s("p",null,[n[4]||(n[4]=a("生成教程可以看 GitHub 官方的帮助文档：")),s("a",d,[n[3]||(n[3]=a("创建用于命令行的个人访问令牌")),t(e)]),n[5]||(n[5]=a("。"))]),n[38]||(n[38]=l('<p>授予权限的时候只给 <code>repo</code> 权限即可。</p><p><img src="https://s2.ax1x.com/2020/02/08/1W3GRA.png" alt="1W3GRA.png"></p><p>令牌名字一定要叫：<code>ACCESS_TOKEN</code>，这是后面的 Action 需要用的。</p><p><img src="https://s2.ax1x.com/2020/02/08/1W35i4.png" alt="1W35i4.png"></p><h2 id="编写-workflow-文件" tabindex="-1"><a class="header-anchor" href="#编写-workflow-文件"><span>编写 workflow 文件</span></a></h2><blockquote><p>持续集成一次运行的过程，就是一个 workflow（工作流程）。</p></blockquote><p>项目结构如图：</p><p><img src="https://s2.ax1x.com/2020/02/07/123CDO.png" alt="123CDO.png"></p>',8)),s("p",null,[n[7]||(n[7]=a("创建")),n[8]||(n[8]=s("code",null,".github/workflows/main.yml",-1)),n[9]||(n[9]=a("文件（可以到我的")),s("a",k,[n[6]||(n[6]=a("示例仓库")),t(e)]),n[10]||(n[10]=a("中查看），内容如下："))]),n[39]||(n[39]=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy GitHub Pages</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 触发条件：在 push 到 master 分支后</span></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> master</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 任务</span></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 服务器环境：最新版 Ubuntu</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># 拉取代码</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># 生成静态文件</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> npm run docs<span class="token punctuation">:</span>build</span>
<span class="line"></span>
<span class="line">      <span class="token comment"># 部署到 GitHub Pages</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@releases/v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages</span>
<span class="line">          <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> docs/.vuepress/dist</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[13]||(n[13]=a("这里我就不对语法作讲解了，需要了解 workflow 的基本语法可以查看")),s("a",m,[n[11]||(n[11]=a("官方帮助")),t(e)]),n[14]||(n[14]=a("，也可以参考")),s("a",b,[n[12]||(n[12]=a("阮一峰老师的 GitHub Actions 入门教程")),t(e)]),n[15]||(n[15]=a("。"))]),n[40]||(n[40]=l('<p>这里我写了三步：</p><ol><li>拉取代码。用到了一个 GitHub 官方 action：<code>actions/checkout</code> 。</li><li>生成静态文件。直接运行脚本，如果你不是用的 VuePress 或者脚本不一样，要修改成你自己的。</li><li>部署到 GitHub Pages。使用了第三方作者的 action：<code>JamesIves/github-pages-deploy-action@releases/v3</code>。我详细介绍下这个 action：</li></ol><p>使用 <code>with</code> 参数向环境中传入了三个环境变量：</p><ol><li><code>ACCESS_TOKEN</code>：读取 GitHub 仓库 secrets 的 <code>ACCESS_TOKEN</code> 变量，也就是我们前面设置的</li><li><code>BRANCH</code>：部署分支 <code>gh-pages</code>（GitHub Pages 读取的分支）</li><li><code>FOLDER</code>：需要部署的文件在 <code>docs/.vuepress/dist</code> 路径，也就是我们使用 <code>npm run docs:build</code> 生成的静态文件的位置</li></ol><blockquote><p>这里有一点需要注意：我使用的是 <code>v3</code> 版本，需要使用 <code>with</code> 参数传入环境变量，且需要自行构建；网上常见的教程使用的是 <code>v2</code> 版本，使用 <code>env</code> 参数传入环境变量，不需要自行构建，可使用 <code>BUILD_SCRIPT</code> 环境变量传入构建脚本</p></blockquote><p>至此，配置工作均已完成。提交你的代码，就会开启自动构建。</p><p>以后，你每次有代码 push 到 <code>master</code> 分支时，GitHub 都会开始自动构建。</p><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h2><h3 id="部署失败" tabindex="-1"><a class="header-anchor" href="#部署失败"><span>部署失败</span></a></h3><p>按照教程是不会失败的，但是建议你了解下失败的情况。</p><p>如果部署失败你会收到一封部署失败的邮件</p><p><img src="https://s2.ax1x.com/2020/02/08/1WR8YQ.png" alt="1WR8YQ.png"></p><p>点击可以跳转到仓库的 Action 页面查看日志</p><p><img src="https://s2.ax1x.com/2020/02/08/1WRclR.png" alt="1WRclR.png"></p><p>展开错误的部署 job 查看日志</p><p><img src="https://s2.ax1x.com/2020/02/08/1WRX0f.png" alt="1WRX0f.png"></p><p>可以看到有这么一个错误日志：<code>No such file or directory</code>，经排查，是没有生成静态文件，因此导致路径不存在。</p><blockquote><p>我这个错误是由于参考了网上常见的教程导致的。网上大部分教程（包括前面提到的阮一峰老师的教程）使用的是：<code>JamesIves/github-pages-deploy-action</code> 的 <code>v2</code> 版本，然而引用的时候写的都是：<code>JamesIves/github-pages-deploy-action@master</code>，引用的 <code>master</code> 分支。在作者写的时候可能当时这个 action 最新的就是 <code>v2</code> 版本，所以没有什么问题。然而现在 <code>master</code> 分支已经是 <code>v3</code> 版本了，语法有变化，完全按照教程就会出错。如果继续使用他的教程可以改成<code>JamesIves/github-pages-deploy-action@releases/v2</code>。</p></blockquote><p>修复后重新提交，GitHub 会再次部署。</p><h3 id="部署成功" tabindex="-1"><a class="header-anchor" href="#部署成功"><span>部署成功</span></a></h3><p>点击仓库的 Actions，查看部署情况。</p><p>如果正在部署中，应该是图中标出的这个样子。</p><p><img src="https://s2.ax1x.com/2020/02/08/1WWL8J.png" alt="1WWL8J.png"></p><p>这里显示所有的部署（应该叫做 <em>Workflow</em>，便于理解，就叫 <em>部署</em> 了）记录。图中有三种状态，分别是：部署中（黄色动态图标）、部署完成（绿色对号图标）、部署失败（红色错号图标）。</p><p>点击进入查看部署情况。</p><p><img src="https://s2.ax1x.com/2020/02/10/147bLD.png" alt="147bLD.png"></p><p>部署成功，全是绿色~</p>',27)),s("p",null,[n[17]||(n[17]=a("接下来访问网站验证一下：")),s("a",g,[n[16]||(n[16]=a("https://lasyislazy.github.io/gh-pages-action-demo/")),t(e)])]),n[41]||(n[41]=l(`<p><img src="https://s2.ax1x.com/2020/02/08/1W4BuR.png" alt="1W4BuR.png"></p><p>完美结束，享受 GitHub Actions 带来的愉快体验吧~</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>鉴于还是有很多人不是用的 GitHub Pages，我这里再提供一下其他方式的思路，其实都是一样的，大概分成三步：</p><ol><li>拉取代码</li><li>生成静态文件</li><li>部署到服务器</li></ol><p>前两步都是一样的，不同的方式区别也就在于第三步。</p><p>使用 GitHub Pages 的话可以使用 <code>JamesIves/github-pages-deploy-action</code> 这个 action，使用其他的方式其实也可以找到对应的 action。</p><p>例如，我的网站是部署在虚拟主机空间上的，平时部署是用 FTP 的方式替换主机空间上的静态文件，因此找到了一个可以部署到 FTP 上的 acton <code>SamKirkland/FTP-Deploy-Action</code>，然后第三步就变为了：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FTP Deploy</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> SamKirkland/FTP<span class="token punctuation">-</span>Deploy<span class="token punctuation">-</span>Action@2.0.0</span>
<span class="line">        <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">FTP_SERVER</span><span class="token punctuation">:</span> xxx.xxx.com</span>
<span class="line">          <span class="token key atrule">FTP_USERNAME</span><span class="token punctuation">:</span> xxxx</span>
<span class="line">          <span class="token key atrule">FTP_PASSWORD</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.BLOG_FTP_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">LOCAL_DIR</span><span class="token punctuation">:</span> docs/.vuepress/dist</span>
<span class="line">          <span class="token key atrule">REMOTE_DIR</span><span class="token punctuation">:</span> /htdocs</span>
<span class="line">          <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>delete <span class="token punctuation">-</span><span class="token punctuation">-</span>transfer<span class="token punctuation">-</span>all <span class="token punctuation">-</span><span class="token punctuation">-</span>exclude=logreport <span class="token punctuation">-</span><span class="token punctuation">-</span>verbose</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般都是传一些环境变量进去就可以了，需要哪些环境变量去这个 action 的 GitHub 上看下介绍就好了。</p><p>最后再说一下怎么找 action，以下是几个常用的网址：</p>`,11)),s("ul",null,[s("li",null,[s("a",h,[n[18]||(n[18]=a("https://github.com/actions")),t(e)]),n[19]||(n[19]=a("：GitHub 官方的 action"))]),s("li",null,[s("a",v,[n[20]||(n[20]=a("https://github.com/marketplace?type=actions")),t(e)]),n[21]||(n[21]=a("：GitHub 官方市场中的 action"))]),s("li",null,[s("a",w,[n[22]||(n[22]=a("https://github.com/sdras/awesome-actions")),t(e)]),n[23]||(n[23]=a("：第三方收集的有用的 action"))])]),n[42]||(n[42]=s("p",null,"然后就是要利用好搜索引擎了。",-1)),n[43]||(n[43]=s("p",null,"实在找不到就得自己写 action 了，本篇就不讨论了。",-1)),s("p",null,[n[25]||(n[25]=a("以上便是本篇教程全部内容，本篇首发于我的个人博客：")),s("a",y,[n[24]||(n[24]=a("https://www.lasy.site/")),t(e)])]),s("div",f,[n[31]||(n[31]=l('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">提示</p>',2)),s("p",null,[n[28]||(n[28]=a("本文作者 ")),s("a",x,[n[26]||(n[26]=a("Lasy")),t(e)]),n[29]||(n[29]=a("，博客 ")),s("a",G,[n[27]||(n[27]=a("Lasy")),t(e)]),n[30]||(n[30]=a("。"))])]),n[44]||(n[44]=s("p",null,"参考链接：",-1)),s("ul",null,[s("li",null,[s("a",A,[n[32]||(n[32]=a("https://help.github.com/en/github/working-with-github-pages/about-github-pages")),t(e)])]),s("li",null,[s("a",H,[n[33]||(n[33]=a("https://help.github.com/cn/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions")),t(e)])]),s("li",null,[s("a",R,[n[34]||(n[34]=a("http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html")),t(e)])])])])}const L=p(c,[["render",P]]),C=JSON.parse('{"path":"/blogs/github-actions.html","title":"使用 GitHub Actions 自动部署博客","lang":"zh-CN","frontmatter":{"title":"使用 GitHub Actions 自动部署博客","date":"2020-02-10T00:00:00.000Z","author":"Lasy","tags":["Github Actions","VuePress","博客"],"categories":["blog"]},"headers":[{"level":2,"title":"设置 Secrets","slug":"设置-secrets","link":"#设置-secrets","children":[]},{"level":2,"title":"编写 workflow 文件","slug":"编写-workflow-文件","link":"#编写-workflow-文件","children":[]},{"level":2,"title":"验证","slug":"验证","link":"#验证","children":[{"level":3,"title":"部署失败","slug":"部署失败","link":"#部署失败","children":[]},{"level":3,"title":"部署成功","slug":"部署成功","link":"#部署成功","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1747990935000,"updatedTime":1747990935000,"contributors":[{"name":"三人","username":"","email":"stwangcq@163.com","commits":1}]},"filePathRelative":"blogs/github-actions.md"}');export{L as comp,C as data};
